<?php

/**
 * @file
 * Iform Mobile Authentication Module's Core functionality.
 *
 * API design guidelines:
 * https://cloud.google.com/apis/design/
 *
 * JSON API
 * http://jsonapi.org/format/
 */

use Drupal\Core\Logger\RfcLogLevel;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

// Module configuration's URL path.
const CONFIG_PATH = 'admin/config/indicia_api/api';

const API_BASE = 'api';
const API_VERSION = 'v1';

const API_PATH = API_BASE . '/' . API_VERSION;


/**
 * Setup the profile fields.
 */
const FIRSTNAME_FIELD = 'field_first_name';
const SECONDNAME_FIELD = 'field_last_name';
const ACTIVATION_FIELD = 'field_activation_token';
const INDICIA_ID_FIELD = 'field_indicia_user_id';


/**
 * Implements hook_permission().
 */
function indicia_api_permission() {
  return array(
    'admin mobile auth' => array(
      'title' => t('View the administrative dashbord'),
      'description' => t('Allows to reach the administrative dashboard and so manage it.'),
    ),
    'user mobile auth' => array(
      'title' => t('View personal dashboard'),
      'description' => t('View personal Indicia API dashboard, to manage personal assigned information.'),
    ),
  );
}


/*
 * Submit the relevant information to indicia
 */
iform_load_helpers(array('data_entry_helper'));

/**
 * Checks if the user is allowed to see a saved key account.
 *
 * @param array $key
 *   An array containing details of an key account.
 *
 * @return bool
 *   TRUE if user has the 'admin mobile auth permission' or they created the
 *   key.
 */
function indicia_api_user_has_permission($key = NULL) {
  global $user;
  return \Drupal::currentUser()->hasPermission('admin mobile auth') || (!is_null($key) && $key['created_by'] === $user->uid);
}

/**
 * Implements hook_load().
 */
function indicia_api_key_load($id = NULL) {
  if ($id) {
    // Get specific key account.
    $results = db_query("SELECT * FROM {indicia_api}
      WHERE id = :id ORDER BY title", array(':id' => $id));
  }
  else {
    // All accounts.
    $results = db_query("SELECT * FROM {indicia_api} ORDER BY title");
  }

  // Transform an array of keys.
  $keys = array();
  foreach ($results as $key) {
    $keys[] = (array) $key;
  }

  return $keys;
}

/**
 * Checks if the key matches any in the database.
 *
 * This function iterates through the list of key accounts from database table.
 *
 * Why key is in the header:
 * http://www.bizcoder.com/where-oh-where-does-the-api-key-go
 * http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html
 */
function indicia_api_authorise_key() {
  if (!isset($_SERVER['HTTP_X_API_KEY']) || empty($_SERVER['HTTP_X_API_KEY'])) {
    return FALSE;
  }

  $key = $_SERVER['HTTP_X_API_KEY'];

  $result = db_query(
    "SELECT * FROM {indicia_api} WHERE api_key = :key",
    array(':key' => $key));

  $result_array = $result->fetchAll();

  if (count($result_array) !== 1) {
    return FALSE;
  }

  if (!$result_array[0]->enabled) {
    return FALSE;
  }

  return TRUE;
}


/**
 * Authorise a user request.
 *
 * Uses the posted password and email to check that
 * the user is valid and activated.
 * @return object
 *   Drupal user object, or FALSE if not authorised.
 */
function indicia_api_authorise_user() {
  if (empty($_SERVER['PHP_AUTH_USER']) || empty($_SERVER['PHP_AUTH_PW'])) {
    indicia_api_log('User or password was not sent');
    return FALSE;
  }

  $name = $_SERVER['PHP_AUTH_USER'];
  $password = $_SERVER['PHP_AUTH_PW'];

  $existing_user = NULL;
  if(filter_var($_SERVER['PHP_AUTH_USER'], FILTER_VALIDATE_EMAIL)) {
    // Email.
    $existing_user = user_load_by_mail($name);
    indicia_api_log('User loaded by mail');

    // In case the username is an email and username != email
    if (empty($existing_user)) {
      $existing_user = user_load_by_name($name);
      indicia_api_log('User loaded by name');
    }
  }
  else {
    // Name.
    indicia_api_log('User loaded by name');
    $existing_user = user_load_by_name($name);
  }

  if (empty($existing_user)) {
    indicia_api_log('User was not found');
    return FALSE;
  }

  if (!\Drupal::service('user.auth')->authenticate($existing_user->get('name')->value, $password)) {
    indicia_api_log('User password was incorrect');
    return FALSE;
  }

  if (!$existing_user->isActive()) {
    indicia_api_log('User is not activated');
    // Check for activation.
    return FALSE;
  }

  indicia_api_log('Successfully found user');
  $GLOBALS['user'] = $existing_user;

  return $existing_user;
}

/**
 * A function to escape user input.
 *
 * Currently simply a wrapper around drupal's check_plain function.
 */
function indicia_api_escape($value) {
  if (is_array($value)) {
    $escaped_array = array();
    foreach ($value as $key => $nested_value) {
      $escaped_array[$key] = indicia_api_escape($nested_value);
    }
    return $escaped_array;
  }
  else {
    return check_plain($value);
  }
}

/**
 * A simple utility method to generate a random string of specific length.
 *
 * @param int $length
 *   The length of string required.
 *
 * @return string
 *   A random string.
 */
function indicia_api_generate_random_string($length = 10) {
  return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}


/**
 * Obtains an indicia user id from the warehouse.
 *
 * This calls the index.php/services/user_identifier/get_user_id service to
 * return an indicia id which can be associated with the user account.
 *
 * @param string $email
 *   The user's email.
 * @param string $firstname
 *   The user's first name.
 * @param string $secondname
 *   The user's surname.
 * @param int $cms_id
 *   The Drupal user id. Not needed when creating new users.
 *
 * @return int
 *   The indicia user id if successful else -1 or and error message.
 */
function indicia_api_get_user_id($email, $firstname, $secondname, $cms_id = NULL) {
  // Get connection/indicia website details.
  $connection = iform_get_connection_details(NULL);

  $postargs = array();
  $postargs['website_id'] = $connection['website_id'];

  // Obtain nonce.
  $curl_check = data_entry_helper::http_post(
    data_entry_helper::$base_url . 'index.php/services/security/get_nonce',
    $postargs);

  if ($curl_check['result']) {
    $nonce = $curl_check['output'];

    $postargs = array();
    $postargs['identifiers'] = '[{"type":"email","identifier":"' . $email . '"}]';
    $postargs['auth_token'] = sha1($nonce . ":" . $connection['password']);
    $postargs['surname'] = $secondname;
    $postargs['first_name'] = $firstname;
    if (isset($cms_id)) {
      $postargs['cms_user_id'] = $cms_id;
    }
    $postargs['force'] = 'split';
    $postargs['nonce'] = $nonce;

    indicia_api_log(print_r($postargs, 1));

    // Request the user id.
    $get_id_results = data_entry_helper::http_post(
      data_entry_helper::$base_url . 'index.php/services/user_identifier/get_user_id',
      $postargs,
      FALSE);
    indicia_api_log(print_r($get_id_results, 1));

    $result = json_decode($get_id_results['output']);
    if (!isset($result->error)) {
      return intval($result->userId);
    }
    else {
      indicia_api_log('Error in indicia_api_get_user_id:' . $result->error);
      return $result->error;
    }
  }
  else {
    indicia_api_log('indicia_api_get_user_id:Unable to retreive nonce');
  }

  return -1;
}

/**
 *  Check for existing user that do not have indicia id in their profile field.
 *
 * @param $existing_user_obj
 */
function check_user_indicia_id($user_full) {
  // Allow to update own user record only.
  if (!ownAuthenticated($user_full)) {
    return;
  }

  $indicia_user_id = $user_full->get(INDICIA_ID_FIELD)->value;
  if (!$indicia_user_id || $indicia_user_id == -1) {
    indicia_api_log('Associating indicia user id');
    // Look up indicia id.
    $indicia_user_id = indicia_api_get_user_id($user_full->get('mail')->value,
      $user_full->get(FIRSTNAME_FIELD)->value,
      $user_full->get(SECONDNAME_FIELD)->value,
      $user_full->id());

    if (is_int($indicia_user_id)) {
      $user_full->set(INDICIA_ID_FIELD, $indicia_user_id);
      $user_full->save();
    }
  }
}

/**
 * Test if the supplied password is acceptable.
 *
 * Simple at the moment but could contain additional checks (alpha-numerics,
 * special chars etc)
 *
 * @param string $pass
 *   The proposed password.
 *
 * @return bool
 *   TRUE is password is acceptable, else FALSE
 */
function indicia_api_validate_password($pass) {
  return strlen($pass) >= 0;
}


/**
 * Logs messages if in log mode.
 *
 * Messages go to the PHP error log and the Drupal error log.
 */
function indicia_api_log($message, $severity = RfcLogLevel::NOTICE) {
  // Obtain log mode indicator.
  if (!isset($_SERVER['HTTP_X_API_KEY']) || empty($_SERVER['HTTP_X_API_KEY'])) {
    return;
  }

  $key = $_SERVER['HTTP_X_API_KEY'];

  $result = db_query("SELECT * FROM {indicia_api} WHERE api_key = :key",
    array(':key' => $key));
  $result_array = $result->fetchAll();
  $log_mode = $result_array[0]->log;

  switch ($log_mode) {
    case RfcLogLevel::DEBUG:
      error_log($message);
      \Drupal::logger('indicia_api')->log($severity, $message);
      break;

    case RfcLogLevel::ERROR:
      if ($severity === RfcLogLevel::ERROR) {
        error_log($message);
        \Drupal::logger('indicia_api')->log($severity, $message);
      }
      break;

    default:
  }
}

/**
 * Prints to log and returns a json formatted error back to the client.
 *
 * @param int $code
 *   Status code of the header.
 * @param string $status
 *   Status of the header.
 * @param string $title
 *   Title of the error.
 * @param null $errors
 *   If multiple errors then it can be passed as an array.
 */

function error_print($code, $status, $title, $errors = NULL) {
  $headers = [
    'Status' => $code . ' ' . $status,
    'Access-Control-Allow-Origin' => '*',
    'Access-Control-Allow-Methods' => 'GET,PUT,OPTIONS',
    'Access-Control-Allow-Headers' => 'authorization, x-api-key',
  ];
  if (is_null($errors)) {
    $data = [
      'errors' => [
        [
          'status' => (string) $code,
          'title' => $title,
        ],
      ],
    ];

    indicia_api_log($title, RfcLogLevel::ERROR);
  }
  else {
    indicia_api_log('Errors', RfcLogLevel::ERROR);
    indicia_api_log(print_r($errors, 1), RfcLogLevel::ERROR);

    $data = [
      'errors' => $errors,
    ];
  }
  return new JsonResponse($data, $code, $headers);
}


// Allow to update own user record only.
function ownAuthenticated($user, $silent = FALSE) {
  $own = FALSE;

  if (empty($_SERVER['PHP_AUTH_USER'])){
    $own = FALSE;
  }
  else {
    if (filter_var($_SERVER['PHP_AUTH_USER'], FILTER_VALIDATE_EMAIL)) {
      // Email.
      if (strtolower($_SERVER['PHP_AUTH_USER']) === strtolower($user->get('mail')->value)) {
        $own = TRUE;
      }
      // In case the username is an email and username != email
      elseif (strtolower($_SERVER['PHP_AUTH_USER']) === strtolower($user->get('name')->value)) {
        // Name.
        indicia_api_log('Email was found matching the username.');
        $own = TRUE;
      }
      if (!$silent) {
        indicia_api_log(
          'Own account authenticated (email) ' .
          $user->get('mail')->value . ' ' .
          ($own ? 'TRUE' : 'FALSE')
        );
      }
    }
    else {
      if (strtolower($_SERVER['PHP_AUTH_USER']) === strtolower($user->get('name')->value)) {
        // Name.
        $own = TRUE;
      }

      if (!$silent) {
        indicia_api_log(
          'Own account authenticated (name) ' .
          $user->get('name')->value . ' ' .
          ($own ? 'TRUE' : 'FALSE')
        );
      }
    }
  }

  return $own;
}


/**
 * Implements hook_mail().
 */
function indicia_api_mail($key, &$message, $params) {
  switch ($key) {
    case 'register':
      global $base_url;
      $path = $base_url . '/' . API_PATH;
      $activation_url = "$path/users/{$params['uid']}/activate?" .
        "activationToken={$params['activation_token']}";

      $site_name = \Drupal::config('system.site')->get('name');
      $message['subject'] = t("Welcome to $site_name");
      $message['body'][] = t("Activate your account by visiting the following page in your web browser: $activation_url");
      break;
  }
}
